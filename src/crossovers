from typing import List

import numpy as np

def crossover1(parent1: List[List[int]], parent2: List[List[int]], random_state: int = None) -> List[List[List[int]]]:
    if random_state is not None:
        np.random.seed(random_state)
    
    num_couriers = len(parent1)
    courier_idx = np.random.randint(num_couriers)

    print(courier_idx)
    
    child1, child2 = parent1.copy(), parent2.copy()
    
    points_to_swap_child1 = child1[courier_idx]
    points_to_swap_child2 = child2[courier_idx]
    
    child1[courier_idx], child2[courier_idx] = points_to_swap_child2, points_to_swap_child1
    
    return child1, child2

def crossover2(parent1, parent2, random_state=None):
    if random_state is not None:
        np.random.seed(random_state)

    num_couriers = len(parent1)
    point1, point2 = sorted(np.random.choice(range(1, num_couriers), size=2, replace=False))

    child1, child2 = parent1.copy(), parent2.copy()

    child1[point1:point2], child2[point1:point2] = parent2[point1:point2], parent1[point1:point2]

    return child1, child2

def crossover3(parent1, parent2, random_state=None):
    if random_state is not None:
        np.random.seed(random_state)
    
    num_couriers = len(parent1)
    crossover_point = np.random.randint(1, num_couriers)
    
    
    child = parent1[:crossover_point].copy()
    
    for courier in parent2[crossover_point:]:
        for point in courier:
            if not any(point in courier for courier in child):
                child.append([point])
    
    return child